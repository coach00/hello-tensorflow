import tensorflow as tf
import cv2
import os
import scipy
import numpy as np

#先添加路径至搜索范围
train_dir = os.path.join("H:\\python资料\\data_road\\data_road\\training\\image_2")
train_label_dir = os.path.join("H:\\python资料\\data_road\\data_road\\training\\gt_image_2")

#列出文件列表并排序
train_list_dir = os.listdir(train_dir)
train_list_dir.sort()
train_label_list_dir = os.listdir(train_label_dir)
train_label_list_dir.sort()
train_label_list_dir = train_label_list_dir[95:]

#生成每个文件图片的路径
train_filenames = [train_dir + "\\" + filename for filename in train_list_dir]
train_label_filenames = [train_label_dir + "\\" + filename for filename in train_label_list_dir]
test_dir = os.path.join("H:\\python资料\\data_road\\data_road\\testing\\image_2")
test_list_dir = os.listdir(test_dir)
test_filenames = [test_dir + "\\" + filename for filename in test_list_dir]

#用生成迭代器方法来读取数据
def train_generator():
    """
    训练集生成器
    """
    for train_filename,train_label_filename in zip(train_filenames,train_label_filenames):
        image,label = handle_data(train_filename,train_label_filename)
        yield image,label

def test_generator():
    for test_filename in test_filenames:
        image = handle_data(test_filename)
        yield image


def handle_data(train_filenames, train_label_filenames):
    image = scipy.misc.imresize(scipy.misc.imread(train_filenames), image_shape)
    image_yuv = cv2.cvtColor(image, cv2.COLOR_RGB2YUV)
    image_yuv[:, :, 0] = cv2.equalizeHist(image_yuv[:, :, 0])
    image = cv2.cvtColor(image_yuv, cv2.COLOR_YUV2RGB)

    # 对label做处理
    if train_label_filenames is not None:
        gt_image = scipy.misc.imresize(scipy.misc.imread(train_label_filenames), image_shape)
        background_color = np.array([255, 0, 0])
        gt_bg = np.all(gt_image == background_color, axis=2)
        gt_bg = gt_bg.reshape(*gt_bg.shape, 1)
        gt_image = np.concatenate((gt_bg, np.invert(gt_bg)), axis=2)
        return np.array(image), gt_image
    else:
        return np.array(image)

#读取数据并生成dataset
image_shape = (160,576)
train_dataset = tf.data.Dataset.from_generator(train_generator,(tf.float32,tf.float32),(tf.TensorShape([None,None,None]),tf.TensorShape([None,None,None])))
train_dataset = train_dataset.shuffle(buffer_size=len(train_filenames)).batch(100)
