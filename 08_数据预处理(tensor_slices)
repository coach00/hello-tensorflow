import tensorflow as tf
import os
import matplotlib.pyplot as plt

#获取类别名称
data_dir = os.path.join("H:\\python资料\\flower_photos\\flower_photos")
class_list = os.listdir(data_dir)
class_list.sort()
class_list = class_list[1:6]

#获取图片的地址
labels = []
for i in range(len(class_list)):
    classdata_dir = "H:\\python资料\\flower_photos\\flower_photos\\" + class_list[i]
    train_list_dir = os.listdir(classdata_dir)
    for j in range(len(train_list_dir)):
        labels.append(class_list[i])
all_img_path = []
for i in range(len(class_list)):
    classdata_dir = "H:\\python资料\\flower_photos\\flower_photos\\" + class_list[i]
    train_list_dir = os.listdir(classdata_dir)
    train_filenames = ["H:\\python资料\\flower_photos\\flower_photos\\" + class_list[i] + "\\" + filename for filename in train_list_dir]
    all_img_path = all_img_path + train_filenames

map_list = {'daisy':0,'dandelion':1,'roses':2,'sunflowers':3,'tulips':4}
labels = [map_list[i] for i in labels]
label_to_index = dict((name,index) for index,name in enumerate(class_list))

#图片预处理函数
def load_and_preprocess_image(path):
    image = tf.io.read_file(path)
    image = tf.image.decode_jpeg(image,channels=3)
    image = tf.image.resize(image,[192,192])
    image /= 255.0
    return image

#生成dataset
path_ds = tf.data.Dataset.from_tensor_slices(all_img_path)
AUTOTUNE = tf.data.experimental.AUTOTUNE
image_ds = path_ds.map(load_and_preprocess_image,num_parallel_calls=AUTOTUNE)
label_ds = tf.data.Dataset.from_tensor_slices(tf.cast(labels,tf.int64))
image_label_ds = tf.data.Dataset.zip((image_ds,label_ds))
image_count = len(all_img_path)
ds = image_label_ds.shuffle(buffer_size=image_count)
ds = ds.repeat()
ds = ds.batch(32)
ds = ds.prefetch(buffer_size=AUTOTUNE)
def change_range(image,label):
    return image*2 - 1,label
keras_ds = ds.map(change_range)

#可视化数据和标签，观察是否正确
"""
def find_key(label_num):
    return [k for (k,v) in map_list.items() if v == label_num]

plt.figure(figsize=(8,8))
for n,image_label in enumerate(image_label_ds.take(4)):
    plt.subplot(2,2,n+1)
    plt.imshow(image_label[0])
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    label_test = image_label[1].numpy()
    plt.xlabel(str(find_key(label_test)))
"""

#下载mobileNet模型，并进行全局平均池化，添加5分类softmax层
mobile_net = tf.keras.applications.MobileNetV2(input_shape=(192, 192, 3),include_top=False)
mobile_net.trainable = False
model = tf.keras.Sequential([
    mobile_net,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(5,activation='softmax')
])

#编译并训练模型
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['acc'])
model.fit(ds,epochs=10,steps_per_epoch=10)
